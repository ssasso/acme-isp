# Validate ACME LAB
---

ospf_c1_c2:
  description: Check the CORE-1 to CORE-2 OSPF session
  nodes: [ core1 ]
  plugin: ospf_neighbor(nodes.core2.ospf.router_id)

pfx_c1_ospf:
  description: Check for OSPF prefix for CORE-1 loopback
  pass: The CORE-1 loopback is redistributed back into OSPF
  fail: The CORE-1 loopback is not redistributed back into OSPF
  nodes: [ igw1, igw2, ixp, corp1, corp2, bras ]
  plugin: ospf_prefix(nodes.core1.loopback.ipv4)

pfx_c2_ospf:
  description: Check for OSPF prefix for CORE-2 loopback
  pass: The CORE-2 loopback is redistributed back into OSPF
  fail: The CORE-2 loopback is not redistributed back into OSPF
  nodes: [ igw1, igw2, ixp, corp1, corp2, bras ]
  plugin: ospf_prefix(nodes.core2.loopback.ipv4)

ibgp_c1:
  description: Check IBGP session towards CORE-1
  fail: IBGP session to CORE-1 is not established
  nodes: [ core2, igw1, igw2, ixp, corp1, corp2, bras ]
  plugin: bgp_neighbor(node.bgp.neighbors,'core1')
  stop_on_error: True

ibgp_c2:
  description: Check IBGP session towards CORE-2
  fail: IBGP session to CORE-2 is not established
  nodes: [ core1, igw1, igw2, ixp, corp1, corp2, bras ]
  plugin: bgp_neighbor(node.bgp.neighbors,'core2')
  stop_on_error: True

bgp_igw1_transit:
  description: Check the IGW-1 - TRANSIT-1 EBGP session
  nodes: [ igw1 ]
  plugin: bgp_neighbor(node.bgp.neighbors,'transit1')

bgp_igw2_transit:
  description: Check the IGW-2 - TRANSIT-2 EBGP session
  nodes: [ igw2 ]
  plugin: bgp_neighbor(node.bgp.neighbors,'transit2')

pfx_tr1_bgp:
  description: Check for BGP prefix for transit-1 loopback on BGP core routers
  pass: The transit-1 loopback is present as a BGP prefix
  fail: The transit-1 loopback is not advertised in BGP
  nodes: [ core1, core2 ]
  plugin: bgp_prefix(nodes.transit1.loopback.ipv4)

pfx_tr2_bgp:
  description: Check for BGP prefix for transit-2 loopback on BGP core routers
  pass: The transit-2 loopback is present as a BGP prefix
  fail: The transit-2 loopback is not advertised in BGP
  nodes: [ core1, core2 ]
  plugin: bgp_prefix(nodes.transit2.loopback.ipv4)

c1_prefix:
  description: Check the propagation of Customer 1 prefixes
  fail: Customer 1 prefix is not visible on the core router
  pass: Core router is receiving prefixes from Customer 1
  nodes: [ core1, core2 ]
  plugin: bgp_prefix('100.100.15.0/24',aspath='65535')

aspath_t1:
  description: Check correct AS-Path on Transit-1
  nodes: [ transit1 ]
  plugin: bgp_prefix('100.100.0.0/20',aspath='64666 64666')

aspath_t2:
  description: Check correct AS-Path on Transit-2
  nodes: [ transit2 ]
  plugin: bgp_prefix('100.100.0.0/20',aspath='64666 64666 64666')

c1_bestpath:
  description: Check correct Best Path on Customer-1 Router
  nodes: [ c1rt ]
  plugin: bgp_prefix('100.100.0.0/20',peer=nodes.corp1.bgp.router_id,best=True)

best_to_wins:
  description: Check correct Best Path TO WINstagram
  nodes: [ core1 ]
  plugin: bgp_prefix('100.80.44.0/24',peer=nodes.ixp.bgp.router_id,aspath='65040',best=True)

best_from_wins:
  description: Check correct Best Path FROM WINstagram
  nodes: [ winsrt ]
  plugin: bgp_prefix('100.100.0.0/20',nh=nodes.ixp.interfaces[2].ipv4,best=True)

best_to_nx:
  description: Check correct Best Path TO Newspaper-X
  nodes: [ core1 ]
  plugin: bgp_prefix('100.90.55.0/24',peer=nodes.igw1.bgp.router_id,best=True)

best_from_nx:
  description: Check correct Best Path FROM Newspaper-X
  nodes: [ nxrt ]
  plugin: bgp_prefix('100.100.0.0/20',peer=nodes.transit1.bgp.router_id,aspath='65001 64666 64666',best=True)

ping_wins:
  description: Pinging WINstagram Web Server
  nodes: [ c1host, c2host, c3host ]
  devices: [ linux ]
  exec: ping -c 10 winsweb -A
  valid: |
    "64 bytes" in stdout

ping_nx:
  description: Pinging Newspaper-X Web Server
  nodes: [ c1host, c2host, c3host ]
  devices: [ linux ]
  exec: ping -c 10 nxweb -A
  valid: |
    "64 bytes" in stdout
